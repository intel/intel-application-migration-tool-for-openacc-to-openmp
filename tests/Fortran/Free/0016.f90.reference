program test
implicit none
integer i,j
real vec(1000)

!$acc parallel loop num_workers(10) copy(vec)
!$omp target teams loop bind(thread) map(tofrom:vec) thread_limit(10)
    do i = 1, 1000
      vec(i) = i+1
    end do

    !$acc parallel num_gangs(2) copy(vec)
!$omp target teams map(tofrom:vec) num_teams(2)
    !$acc loop gang
!$omp loop bind(teams)
    do i = 1, 1000
      vec(i) = i+2
    end do
    !$acc end parallel
!$omp end target teams

    !$acc parallel num_workers(10) num_gangs(2) copy (vec)
!$omp target teams map(tofrom:vec) num_teams(2) thread_limit(10)
    !$acc loop
!$omp loop
    do i = 1, 1000
      vec(i) = i+3
    end do
    !$acc end parallel
!$omp end target teams

    !$acc parallel num_workers(10) num_gangs(2) copy(vec) if (1.eq.1)
!$omp target teams map(tofrom:vec) if(1.eq.1) num_teams(2)&
!$omp thread_limit(10)
    !$acc loop vector
!$omp loop
    do i = 1, 1000
      vec(i) = i+4
    end do
    !$acc end parallel
!$omp end target teams

    !$acc parallel loop vector vector_length(8)
!$omp target teams loop
    do i = 1, 1000
      vec(i) = i+5
    end do

    !$acc parallel loop
!$omp target teams loop
    do i = 1, 1000
      !$acc loop seq
      do j = 1, 1000
        vec(i) = i+5
      end do
    end do

    !$acc parallel loop
!$omp target teams loop
    do i = 1, 1000
      !$acc loop
!$omp loop
      do j = 1, 1000
        vec(i) = i+5
      end do
    end do

end program

! Code was translated using: /nfs/site/home/hservatg/src/intel-application-migration-tool-for-openacc-to-openmp/src/intel-application-migration-tool-for-openacc-to-openmp -force-backup -keep-binding-clauses=all Fortran
